#!/bin/sh

current_dir=$(pwd)

error() {
    printf '\033[91merror\033[0m: %s\n' "$1" >&2
    cd $current_dir
    exit 1
}

move_to_root() {
    if [ "$(pwd)" = '/' ]; then
        error "not in a project"
    fi
    if [ ! -d '.ascr' ]; then
        cd ..
        move_to_root
    fi
}

new() {
    if [ -z "$1" ]; then 
        error 'missing the name argument'
    fi
    if [ -d "$1" -o -f "$1" ]; then
        error "./$1 already exists"
    fi
    mkdir "$1" "$1/output" "$1/src" "$1/.ascr"
    echo 5 > "$1/.ascr/fps"
    art="main : frames\nart 12 1\nhello world!12345/671234\nend"
    printf "%s\n$art\n" '-- default file' > $1/src/main.ascr
    printf 'created project \033[92m%s\033[0m.\n' "$1"
}

build() {
    move_to_root
    if [ ! -z "$(find src -newer output)" ]; then
        fps=$(head -n 1 .ascr/fps | awk '{print $1}')
        ascr -f $fps src/main.ascr && 
        mv short_main.sh main.sh output
    fi
}

run() {
    build
    ./output/short_main.sh
}

play() {
    build
    ./output/main.sh
}

print_help() {
    printf 'uwu [command]
commands: 
  new NAME   create a new project named NAME
  run        run main file at src/main.ascr
  play       play the output file (looping)
  help       show this help message
  
You can also use the first letter of each command.
These can be run from anywhere in your project.
'
}

case $1 in
    new  | n ) new $2 ;;
    run  | r ) run ;;
    play | p ) play ;;
    help | h | -h | --help ) print_help ;;
    * ) error "not a command"
esac

cd $current_dir
