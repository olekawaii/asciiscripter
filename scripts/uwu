#!/bin/sh

set -e

current_dir=$(pwd)

error() {
    printf '\033[91merror\033[0m: %s\n' "$1" >&2
    cd $current_dir
    exit 1
}

move_to_root() {
    until [ -d .ascr ]; do
        [ "$(pwd)" = '/' ] && error "not in a project"
        cd ..
    done
}

new() {
    [ -z "$1" ] && error 'missing the name argument'
    mkdir $1 || error "./$1 already exists"
    cd $1
    mkdir output src .ascr
    echo 5 > .ascr/fps
    printf 'define main of_type video as ...' > src/main.ascr
    printf 'created project \033[92m%s\033[0m.\n' "$1"
}

build() {
    move_to_root
    if [ -z "$(find . -name output -newer src -newer .ascr)" ]; then
        fps=$(awk 'NR == 1 { print $1 }' .ascr/fps)
        cd src
        ascr main.ascr | ascr-to-shell
        mv short_output.sh output.sh ../output
        cd ..
        touch output
    fi
}

run() {
    build
    ./output/short_output.sh
}

play() {
    build
    ./output/output.sh
}

watch() {
    move_to_root
    ls src/* .ascr/* | entr sh -c 'clear -x && uwu run'
}

print_help() {
    printf 'uwu [command]
commands: 
  new NAME   create a new project named NAME
  play       play the output file (looping)
  run        play the short version of the output
  watch      recompile and run on changes (requires entr)
  help       show this help message
  
You can also use the first letter of each command.
These can be run from anywhere in the project.
'
}

case $1 in
    new   | n ) new $2 ;;
    run   | r ) run ;;
    play  | p ) play ;;
    watch | w ) watch ;;
    help  | h | -h | --help ) print_help ;;
    * ) error "not a command"
esac

cd $current_dir
