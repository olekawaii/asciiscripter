                            _ _               _       _
              __ _ ___  ___(_|_)___  ___ _ __(_)_ __ | |_ ___ _ __
             / _` / __|/ __| | / __|/ __| '__| | '_ \| __/ _ \ '__|
            | (_| \__ \ (__| | \__ \ (__| |  | | |_) | ||  __/ |
             \__,_|___/\___|_|_|___/\___|_|  |_| .__/ \__\___|_|
                                               |_|

Work in progress. Check out some examples in the art/ directory


Installing asciiscripter
------------------------

The only dependencies are ghc and optionally `entr`. Install the compiler and 
the script uwu to /usr/local/bin by running

    make install

The compiler is `ascr`. See `ascr -h` for options. You can use uwu for building
and running the project. See 'uwu help'.


First Project -- Using uwu
--------------------------

These are the commands for uwu

    new NAME                 -- create a new project named NAME
    play                     -- play the output shell script (looping)
    run                      -- same as play but only plays once
    watch                    -- recompile and run on changes (requires entr)
    help                     -- show this help message

To create your project run

    uwu new first_project
    cd first_project

Inside you will find

    first_project/           -- root
    |-- .ascr/               -- contains config options for uwu
    |   `-- fps              -- the frames per second
    |-- output/              -- containins the output files
    |   |-- main.sh          -- output of src/main.ascr
    |   `-- short_main.sh    -- main.sh that only plays once and clears
    `-- src/                 -- containins the source code
        `-- main.ascr        -- main file

Paste these lines to src/main.ascr


main : frames
  triangle

triangle : frames
  art viii iv
   /\   ...55...   /\   ...66...
  /  \  ..5//5..  /  \  ..6//6..
 /    \ .5////5. /    \ .6////6.
/______\55555555/______\66666666


Compile and run the main function with `uwu play` (from anywhere in the
project). You should see a success message with the triangle animation
flickering cyan and magenta. The output shell script should appear in
output/main.sh.


Language Syntax
---------------

The language is very simple; there are no conditionals, pattermatching,
recursion, or generics. This will change in the future.


Syntax -- Types
---------------

There are only a handful of types and you can't create your own (for now). Those
types are:

    int        regular integer (may use roman numerals)
    frames     a sequence of frames that make up the video
    fn a b     a function from a b
    color      black | green | yellow | blue | magenta | cyan | white
    direction  south | east | north | west

Types use Polish notation. a function from an `int` to a `bool` is `fn int
bool`. A function from (a function from an int to a bool) to frames is
`fn fn int bool frames`, which in standard notation would be `fn (fn int bool)
frames`. Functions are curried; `add : fn int fn int int` is the addition
function. `add iii iv = vii` however `add iii : fn int int` is a partially-applied
function which when given a iv evaluates to a vii.


Syntax - Values
---------------

All variables are immutable. Syntax for declaring a variable

    five : int
      v

    add_five : fn int int
      add five $1

Here `$1` refers to the first argument of the function. These are art blocks,
beginning with the art keyword

    bird : frames
    art ix v
        ,,   ....11...
      <')    ..371....
       ( \   ...1/1...
    ---YY----222332222
         |\  .....11..

    three_frames : frames
    art ix v
    1   ,,   7...11...2   ,,   7...11...
      <')    ..371....  <')    ..371....
       ( \   ...1/1...   ( \   ...1/1...
    ---YY----222332222---YY----222332222
         |\  .....11..     |\  .....11..
    3   ,,   7...11...
      <')    ..371....
       ( \   ...1/1...
    ---YY----222332222
         |\  .....11..

the `ix v` after the art keyword are the width and height of a frame. Every pixel
in the art has a corresponding color, the colors being

    0  - black
    1  - red
    2  - green
    3  - yellow
    4  - blue
    5  - magenta
    6  - cyan
    7  - white
    .  - transparent
    /  - space

colors `0-7` are only for non-spaces. `/` and `.` are for spaces


Syntax -- Comments
------------------

    -- single-line comment

    ---
    this is a
    multi-line
    comment
    <o>

    rojo : color
      red -- comment

    containing_dashes : frames
      art viii iii
    --------77777777
    -- \/ --77.11.77 <-+
    --------77777777   |

        Not a comment. For a line to be commented in an art
        block, it must both
          * begin with `--` and
          * the line's length should'n be valid, aka it
            shouldn't be divisible by 2*width (the width in
            this case being 8)

    bottom_of_triangle : frames
    art vi ii
    --   /\  ..11..   comment. use `-- ` and not `--` to make its length odd
     /  \ .1//1.
    /____\111111


Built-in Values
---------------

Once I finish implementing algebraic datatypes and patternmatching, these 
functions (and the types) will be moved out of the language and into a standard
library.


join : fn frames fn frames frames
    `join a b` layers a on top of b and makes the output video loopable. Joining
    a (video with 2 frames) and (one with 3 frames) results in a (video with 6 
    frames) so it loops after after every 6 frames.

seq : fn frames fn frames frames
    `seq a b` combines a and b so that b plays after a

dye : fn color fn frames frames
    `dye a b` recolors every pixel in b to the color a

null : frames
    `null` is a single transparent frame. Useful for `seq`

anchor : frames
    `anchor` is a single frame with a space character. Useful for expanding the
    field of view

shift : fn direction fn frames frames
    shifts all coordinates in all frames to the direction

rotate : fn frames frames
    `rotate a` moves the first frame to the back

take : fn int fn frames frames
    `take a b` returns the first a frames of the looping video b

reverse : fn frames frames
    `reverse` reverses the frames

loop : fn frames frames
    `loop a` sequences a with the trimmed (reverse of a) making a smooth
    animathion

do : fn int fn fn frames frames fn frames frames
    do a f b applies f to b a times

